var app, express, hue, io, lightOn, request, server, uuid, ws;

express = require('express');
request = require('request');

app = express();
ws = require('websocket.io');
uuid = require('node-uuid');
app.use(express["static"]('./public'));

app.get('/viewer/:room', function(req, res) {
    var ref;
    return res.render('viewer.jade', {
        params: req.query,
        room_count: ((ref = io.clientsByRoom[req.params.room]) != null ? ref.length : void 0) || 0
    });
});

app.get('/broadcast/:room', function(req, res) {
    var ref;
    return res.render('broadcast.jade', {
        params: req.query,
        room_count: ((ref = io.clientsByRoom[req.params.room]) != null ? ref.length : void 0) || 0
    });
});

lightOn = false;

server = app.listen(5002);

console.log('started');

io = ws.attach(server);

io.clientsById || (io.clientsById = {});

io.clientsByRoom || (io.clientsByRoom = {});

io.on('connection', function(socket) {
    var base, index, room, url;
    url = /\/(.+)/.exec(socket.req.url)[1];
    index = url.lastIndexOf("/");
    room = url.substr(index);
    socket.id = uuid.v1();
    socket.room = room;
    console.log(room);
    if (!room) {
        socket.close();
        return;
    }
    (base = io.clientsByRoom)[room] || (base[room] = []);
    io.clientsByRoom[room].push(socket);
    io.clientsById[socket.id] = socket;
    socket.send(JSON.stringify({
        type: 'assigned_id',
        id: socket.id
    }));
    return socket.on('message', function(data) {
        var i, len, msg, ref, results, sock;
        msg = JSON.parse(data);
        switch (msg.type) {
            case 'received_offer':
            case 'received_candidate':
            case 'received_answer':
                ref = io.clientsByRoom[socket.room];
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                    sock = ref[i];
                    if (sock.id !== socket.id) {
                        results.push(sock.send(JSON.stringify(msg)));
                    } else {
                        results.push(void 0);
                    }
                }
                return results;
                break;
            case 'lights':
                console.log('test');
                lightOn = !lightOn;
                return request({
                    url: 'http://localhost:3333/api/newdeveloper/lights/1/state',
                    method: 'PUT',
                    json: {
                        "on": lightOn
                    }
                }, function(e) {
                        return console.log(e);
                    });
            case 'close':
                return socket.close();
        }
    });
});

// ---
// generated by coffee-script 1.9.2